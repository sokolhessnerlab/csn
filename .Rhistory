rename_at(vars(task, revalidation), ~ paste0(., "start_time"))
recording_time_df <- get_recording_time_df(id_vector)
recording_times_for_id <- recording_time_df %>%
filter(id == 7)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[7]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(7)) %>%
relocate(id)
validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time"))
recording_time_df <- get_recording_time_df(id_vector)
recording_times_for_id <- recording_time_df %>%
filter(id == 7)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[7]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(7)) %>%
relocate(id)
validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time"))
recording_time_df <- get_recording_time_df(id_vector)
recording_times_for_id <- recording_time_df %>%
filter(id == 7)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[7]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(7)) %>%
relocate(id)
validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id))
recording_time_df <- get_recording_time_df(id_vector)
recording_times_for_id <- recording_time_df %>%
filter(id == 7)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[7]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(7)) %>%
relocate(id)
validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
get_times_with_validations_for_id <- function(recording_time_df, id) {
recording_times_for_id <- recording_time_df %>%
filter(id == id)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_times_with_validations_for_id <- function(recording_time_df, id) {
recording_times_for_id <- recording_time_df %>%
filter(id == id)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) %>%
mutate(
revalidation_start_time = revalidation_start_time - task_start_time,
task_start_time = 0
)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) %>%
mutate(
revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
task_start_time = 0
)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) #%>%
#mutate(
#  revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
#  task_start_time = 0
#)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, sttime, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) #%>%
#mutate(
#  revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
#  task_start_time = 0
#)
# Output a single participant's important calibration/validation info
get_event_messages(etd_events[[1]])
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
task_start_time <- id_times$task
revalidation_start_time <- id_times$revalidation
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(sttime < task_start_time | sttime > revalidation_start_time) %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, sttime, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) #%>%
#mutate(
#  revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
#  task_start_time = 0
#)
# Output a single participant's important calibration/validation info
get_event_messages(etd_events[[1]]) %>%
filter(sttime == 1172338)
# Output a single participant's important calibration/validation info
get_event_messages(etd_events[[1]])
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(category == "VALIDATION") %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, sttime, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) #%>%
#mutate(
#  revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
#  task_start_time = 0
#)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(category == "VALIDATION") %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector) #%>%
#mutate(
#  revalidation_start_time = (revalidation_start_time - task_start_time) / 1000,
#  task_start_time = 0
#)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(category == "VALIDATION") %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector)
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(category == "VALIDATION") %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category, sttime)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_times_with_validations_for_id <- function(recording_time_df, i) {
recording_times_for_id <- recording_time_df %>%
filter(id == i)
validated_participant_details <- get_event_messages(etd_events[[i]]) %>%
filter(category == "VALIDATION") %>%
arrange(sttime) %>%
slice_tail(n = 2) %>%
mutate(id = as.integer(i)) %>%
relocate(id)
times_with_validations <- validated_participant_details %>%
inner_join(recording_times_for_id) %>%
select(-c(message, category)) %>% # dropped cols from events
select(-c(calibration, validation)) %>%# dropped cols from recordings
rename_at(vars(task, revalidation), ~ paste0(., "_start_time")) %>%
mutate(id = as.integer(id)) %>%
relocate(id, sttime, task_start_time, revalidation_start_time)
return(times_with_validations)
}
get_all_times_with_validations <- function(id_vector) {
df <- data.frame()
recording_time_df <- get_recording_time_df(id_vector)
for (i in id_vector) {
times_with_validations <- get_times_with_validations_for_id(recording_time_df, i)
df <- bind_rows(df, times_with_validations)
}
return(df)
}
get_all_times_with_validations(id_vector)
get_all_times_with_validations(id_vector) %>% limit(5)
get_all_times_with_validations(id_vector) %>% slice_head(n = 10)
# Output a single participant's important calibration/validation info
get_event_messages(etd_events[[5]])
install.packages(c("formatR", "knitr", "readr", "stringr", "tidyverse"))
knitr::opts_chunk$set(
warning = FALSE,
strip.white = TRUE,
tidy = TRUE,
highlight = TRUE
)
library(tidyverse)
library(formatR)
