get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
get_pix_y_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
str_split(word(message, PIX_OFFSET_STRING_INDEX), ",")[[1]][2]
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(c(message, sttime)) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message),
pix_y_offset = str_c(str_split(pix_offset, ","))[1]
) %>%
relocate(-message)
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(c(message, sttime)) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset")) %>%
relocate(-message)
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
str_split(word(message, PIX_OFFSET_STRING_INDEX)
}
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(c(message, sttime)) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",") %>%
relocate(-message)
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(c(message, sttime)) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",")
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",")
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message))) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
)
#%>%
# separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",")
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message))) #%>%
#filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
# mutate(
#  category = get_category_from_message(message),
#  quality = get_quality_from_message(message),
#  avg_error = get_avg_error_from_message(message),
#  max_error = get_max_error_from_message(message),
#  deg_offset = get_deg_offset_from_message(message),
#  pix_offset = get_pix_offset_from_message(message)
#)
#%>%
# separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",")
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message)), sttime = sttime) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",")
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message)), sttime = sttime) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",") %>%
relocate(-message)
}
format_event_result_messages(etd_events[[1]])
CALIBRATION_RESULT_MESSAGE <- "!CAL CALIBRATION HV9 R RIGHT"
VALIDATION_RESULT_MESSAGE <- "!CAL VALIDATION HV9 R RIGHT"
CATEGORY_STRING_PATTERN <- "CALIBRATION|VALIDATION"
QUALITY_STRING_PATTERN <- "GOOD|FAIR|POOR"
AVG_ERROR_STRING_INDEX <- 8
MAX_ERROR_STRING_INDEX <- 10
DEG_OFFSET_STRING_INDEX <- 13
PIX_OFFSET_STRING_INDEX <- 15
get_category_from_message <- function(message) {
# Extract the category of event message
as.character(str_extract(message, CATEGORY_STRING_PATTERN))
}
get_quality_from_message <- function(message) {
# Extract the quality of calibration or validation from event message
as.character(str_extract(message, QUALITY_STRING_PATTERN))
}
get_avg_error_from_message <- function(message) {
# Extract the avg error of validation
as.double(word(message, AVG_ERROR_STRING_INDEX))
}
get_max_error_from_message <- function(message) {
# Extract the max error of validation
as.double(word(message, MAX_ERROR_STRING_INDEX))
}
get_deg_offset_from_message <- function(message) {
# Extract the deg offset of validation
as.double(word(message, DEG_OFFSET_STRING_INDEX))
}
get_pix_offset_from_message <- function(message) {
# Extract the x coordinate of pix offset of validation
word(message, PIX_OFFSET_STRING_INDEX)
}
format_event_result_messages <- function(participant_events) {
participant_events %>%
select(message, sttime) %>%
transmute(message = str_squish(str_trim(message)), sttime = sttime) %>%
filter(str_detect(message, CALIBRATION_RESULT_MESSAGE) | str_detect(message, VALIDATION_RESULT_MESSAGE)) %>%
mutate(
category = get_category_from_message(message),
quality = get_quality_from_message(message),
avg_error = get_avg_error_from_message(message),
max_error = get_max_error_from_message(message),
deg_offset = get_deg_offset_from_message(message),
pix_offset = get_pix_offset_from_message(message)
) %>%
separate(pix_offset, c("pix_x_offset", "pix_y_offset"), ",") %>%
mutate(
pix_x_offset = as.double(pix_x_offset),
pix_y_offset = as.double(pix_y_offset)
) %>%
relocate(-message)
}
format_event_result_messages(etd_events[[1]])
library(tidyverse)
library(knitr)
library(tidyverse)
library(knitr)
library(formatR)
install.packages("formatR")
library(tidyverse)
library(formatR)
install.packages("formatR")
install.packages("gt")
library(gtable)
detach("package:gtable", unload = TRUE)
install.packages("gt")
